# Configuration for macOS

[misc]
# Run `sudo -v` to cache credentials at the start of the run
# This avoids a blocking password prompt in the middle of an unattended run
# (default: false)
# pre_sudo = false

# Sudo command to be used
# sudo_command = "sudo"

# Disable specific steps - same options as the command line flag
disable = ["pip3", "mas"]
# ---
# `a_m`, `app_man`, `asdf`, `atom`, `audit`, `auto_cpufreq`, `bin`, `bob`, `brew_cask`, `brew_formula`,
# `bun`, `bun_packages`, `cargo`, `certbot`, `chezmoi`, `chocolatey`, `choosenim`, `clam_av_db`, `composer`,
# `conda`, `config_update`, `containers`, `custom_commands`, `deb_get`, `deno`, `distrobox`, `dkp_pacman`,
# `dotnet`, `elan`, `emacs`, `firmware`, `flatpak`, `flutter`, `fossil`, `gcloud`, `gem`, `ghcup`,
# `github_cli_extensions`, `git_repos`, `gnome_shell_extensions`, `go`, `guix`, `haxelib`, `helm`,
# `home_manager`, `jetpack`, `julia`, `juliaup`, `kakoune`, `helix`, `krew`, `lure`, `lensfun`, `macports`,
# `mamba`, `miktex`, `mas`, `maza`, `micro`, `mise`, `myrepos`, `nix`, `node`, `opam`, `pacdef`,
# `pacstall`, `pearl`, `pip3`, `pip_review`, `pip_review_local`, `pipupgrade`, `pipx`, `pkg`, `pkgin`,
# `platformio_core`, `pnpm`, `powershell`, `protonup`, `pyenv`, `raco`, `rcm`, `remotes`, `restarts`,
# `rtcl`, `ruby_gems`, `rustup`, `rye`, `scoop`, `sdkman`, `self_update`, `sheldon`, `shell`, `snap`,
# `sparkle`, `spicetify`, `stack`, `stew`, `system`, `tldr`, `tlmgr`, `tmux`, `toolbx`, `vagrant`,
# `vcpkg`, `vim`, `vscode`, `waydroid`, `winget`, `wsl`, `wsl_update`, `xcodes`, `yadm`, `yarn`

# Ignore failures for these steps
# ignore_failures = ["powershell"]

# Do not set the terminal title (default: true)
# Cset_title = false

# Display the time in step titles (default: true)
display_time = false

# Don't ask for confirmations (no default value)
# assume_yes = true

# Do not ask to retry failed steps (default: false)
# no_retry = true

# Cleanup temporary or old files (default: false)
cleanup = true

# Skip sending a notification at the end of a run (default: false)
skip_notify = true

# Run specific steps - same options as the command line flag
# only = ["system", "emacs"]

# Whether to self update
no_self_update = true

# Commands to run before anything
[pre_commands]
# "Emacs Snapshot" = "rm -rf ~/.emacs.d/elpa.bak && cp -rl ~/.emacs.d/elpa ~/.emacs.d/elpa.bak"

# Commands to run after anything
[post_commands]
# "Emacs Snapshot" = "rm -rf ~/.emacs.d/elpa.bak && cp -rl ~/.emacs.d/elpa ~/.emacs.d/elpa.bak"

# Custom commands
[commands]
# "Python Environment" = "~/dev/.env/bin/pip install -i https://pypi.python.org/simple -U --upgrade-strategy eager jupyter"
# "Custom command using interactive shell (unix)" = "-i vim_upgrade"
#
# JavaScript/Node.js with Bun
# "Update Bun" = "bun upgrade"
# "Update global Bun packages" = "bun pm update -g"
#
# Python environment management with uv
# "Update uv" = "pip install --upgrade uv"
# "Update Python packages" = "uv pip install --upgrade --all"
#
# If you use Rust
# "Update Rust" = "rustup update"
#
# If you use Visual Studio Code
# "Update VS Code Extensions" = "code --update-extensions"
# "
# If you use Node Version Manager (nvm)
# "Update nvm" = "nvm upgrade"
#
# If you use Ruby Version Manager (rvm)
# "Update RVM" = "rvm get stable"
#
# If you use Docker
# "Update Docker images" = "docker images | awk '{print $1}' | grep -v REPOSITORY | xargs -L1 docker pull"

[brew]
# Brew-specific configurations
greedy_cask = false
greedy_latest = false
autoremove = true
fetch_head = true

[git]
# How many repos to pull at max in parallel
# max_concurrency = 5

# Additional git repositories to pull
# repos = [
#     "~/src/*/",
#     "~/.config/something"
# ]

# Don't pull the predefined git repos
# pull_predefined = false

# Arguments to pass Git when pulling Repositories
# arguments = "--rebase --autostash"

[npm]
# Use sudo if the NPM directory isn't owned by the current user
# use_sudo = true

[yarn]
# Run `yarn global upgrade` with `sudo`
# use_sudo = true

[python]
# enable_pip_review = true                         ###disabled by default
# enable_pip_review_local = true                   ###disabled by default
# enable_pipupgrade = true                         ###disabled by default
# pipupgrade_arguments = "-y -u --pip-path pip"    ###disabled by default

[composer]
# self_update = true

[firmware]
# Offer to update firmware; if false just check for and display available updates
upgrade = false

[containers]
# Specify the containers to ignore while updating (Wildcard supported)
# ignored_containers = ["ghcr.io/rancher-sandbox/rancher-desktop/rdx-proxy:latest", "docker.io*"]

[lensfun]
# If disabled, Topgrade invokes `lensfun‑update‑data` without root priviledge,
# then the update will be only available to you. Otherwise, `sudo` is required,
# and the update will be installed system-wide, i.e., available to all users.
# (default: false)
# use_sudo = false
